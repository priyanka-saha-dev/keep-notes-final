openapi: 3.0.1
info:
  title: Keep Notes - User Micro Service
  version: 1.0.0
servers:
- url: 'http://localhost:3000/api/v1'
paths:
  /users/register:
    post:
      tags:
      - users
      summary: User Registration
      requestBody:
        description: Details for registration like username, password and email
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: Successful user registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/login:
    post:
      tags:
      - users
      summary: User Login
      requestBody:
        description: Details for Login like username & password
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: Successful user login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/getUsers:
    get:
      tags:
      - users
      summary: Fetch all registered users
      responses:
        200:
          description: Fetched all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        403:
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth:
    post:
      tags:
      - auth
      summary: User authentication with Bearer Token
      requestBody:
        description: Bearer token for user authentication
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        200:
          description: Successful bearer token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: Invalid bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
security:
  - ApiKeyAuth: []
  - OAuth2:
      - read
      - write
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    User:
      required:
      - password
      - userId
      - username
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
    Users:
      type: array
      items:
        type: string
    Error:
      required:
      - message
      - status
      type: object
      properties:
        message:
          type: string
        status:
          type: string
    Auth:
      type: object
      properties:
        Authorization:
          type: string
    